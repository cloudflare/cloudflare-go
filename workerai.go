// File generated from our OpenAPI spec by Stainless.

package cloudflare

import (
	"context"
	"fmt"
	"net/http"

	"github.com/cloudflare/cloudflare-go/internal/apijson"
	"github.com/cloudflare/cloudflare-go/internal/param"
	"github.com/cloudflare/cloudflare-go/internal/requestconfig"
	"github.com/cloudflare/cloudflare-go/option"
)

// WorkerAIService contains methods and other services that help with interacting
// with the cloudflare API. Note, unlike clients, this service does not read
// variables from the environment automatically. You should not instantiate this
// service directly, and instead use the [NewWorkerAIService] method instead.
type WorkerAIService struct {
	Options []option.RequestOption
}

// NewWorkerAIService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewWorkerAIService(opts ...option.RequestOption) (r *WorkerAIService) {
	r = &WorkerAIService{}
	r.Options = opts
	return
}

// This endpoint provides users with the capability to run specific AI models
// on-demand.
//
// By submitting the required input data, users can receive real-time predictions
// or results generated by the chosen AI model. The endpoint supports various AI
// model types, ensuring flexibility and adaptability for diverse use cases.
func (r *WorkerAIService) Run(ctx context.Context, modelName string, params WorkerAIRunParams, opts ...option.RequestOption) (res *WorkerAIRunResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env WorkerAIRunResponseEnvelope
	path := fmt.Sprintf("accounts/%s/ai/run/%s", params.AccountID, modelName)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, params, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

type WorkerAIRunResponse = interface{}

type WorkerAIRunParams struct {
	AccountID param.Field[string]      `path:"account_id,required"`
	Body      param.Field[interface{}] `json:"body,required"`
}

func (r WorkerAIRunParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r.Body)
}

type WorkerAIRunResponseEnvelope struct {
	Errors   []WorkerAIRunResponseEnvelopeErrors `json:"errors,required"`
	Messages []string                            `json:"messages,required"`
	Result   WorkerAIRunResponse                 `json:"result,required"`
	Success  bool                                `json:"success,required"`
	JSON     workerAIRunResponseEnvelopeJSON     `json:"-"`
}

// workerAIRunResponseEnvelopeJSON contains the JSON metadata for the struct
// [WorkerAIRunResponseEnvelope]
type workerAIRunResponseEnvelopeJSON struct {
	Errors      apijson.Field
	Messages    apijson.Field
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *WorkerAIRunResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r workerAIRunResponseEnvelopeJSON) RawJSON() string {
	return r.raw
}

type WorkerAIRunResponseEnvelopeErrors struct {
	Message string                                `json:"message,required"`
	JSON    workerAIRunResponseEnvelopeErrorsJSON `json:"-"`
}

// workerAIRunResponseEnvelopeErrorsJSON contains the JSON metadata for the struct
// [WorkerAIRunResponseEnvelopeErrors]
type workerAIRunResponseEnvelopeErrorsJSON struct {
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *WorkerAIRunResponseEnvelopeErrors) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r workerAIRunResponseEnvelopeErrorsJSON) RawJSON() string {
	return r.raw
}
