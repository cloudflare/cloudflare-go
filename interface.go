// Code generated by ifacemaker (via generate_interface) DO NOT EDIT

package cloudflare

import (
	"context"
	"encoding/json"
)

// CloudflareAPI provides the interface for the Cloudflare V4 API
type CloudflareAPI interface {
	// AccessApplications returns all applications within a zone.
	//
	// API reference: https://api.cloudflare.com/#access-applications-list-access-applications
	AccessApplications(zoneID string, pageOpts PaginationOptions) ([]AccessApplication, ResultInfo, error)
	// AccessApplication returns a single application based on the
	// application ID.
	//
	// API reference: https://api.cloudflare.com/#access-applications-access-applications-details
	AccessApplication(zoneID, applicationID string) (AccessApplication, error)
	// CreateAccessApplication creates a new access application.
	//
	// API reference: https://api.cloudflare.com/#access-applications-create-access-application
	CreateAccessApplication(zoneID string, accessApplication AccessApplication) (AccessApplication, error)
	// UpdateAccessApplication updates an existing access application.
	//
	// API reference: https://api.cloudflare.com/#access-applications-update-access-application
	UpdateAccessApplication(zoneID string, accessApplication AccessApplication) (AccessApplication, error)
	// DeleteAccessApplication deletes an access application.
	//
	// API reference: https://api.cloudflare.com/#access-applications-delete-access-application
	DeleteAccessApplication(zoneID, applicationID string) error
	// RevokeAccessApplicationTokens revokes tokens associated with an
	// access application.
	//
	// API reference: https://api.cloudflare.com/#access-applications-revoke-access-tokens
	RevokeAccessApplicationTokens(zoneID, applicationID string) error
	// AccessGroups returns all access groups for an access application.
	//
	// API reference: https://api.cloudflare.com/#access-groups-list-access-groups
	AccessGroups(accountID string, pageOpts PaginationOptions) ([]AccessGroup, ResultInfo, error)
	// AccessGroup returns a single group based on the group ID.
	//
	// API reference: https://api.cloudflare.com/#access-groups-access-group-details
	AccessGroup(accountID, groupID string) (AccessGroup, error)
	// CreateAccessGroup creates a new access group.
	//
	// API reference: https://api.cloudflare.com/#access-groups-create-access-group
	CreateAccessGroup(accountID string, accessGroup AccessGroup) (AccessGroup, error)
	// UpdateAccessGroup updates an existing access group.
	//
	// API reference: https://api.cloudflare.com/#access-groups-update-access-group
	UpdateAccessGroup(accountID string, accessGroup AccessGroup) (AccessGroup, error)
	// DeleteAccessGroup deletes an access group.
	//
	// API reference: https://api.cloudflare.com/#access-groups-delete-access-group
	DeleteAccessGroup(accountID, groupID string) error
	// AccessIdentityProviders returns all Access Identity Providers for an
	// account.
	//
	// API reference: https://api.cloudflare.com/#access-identity-providers-list-access-identity-providers
	AccessIdentityProviders(accountID string) ([]AccessIdentityProvider, error)
	// AccessIdentityProviderDetails returns a single Access Identity
	// Provider for an account.
	//
	// API reference: https://api.cloudflare.com/#access-identity-providers-access-identity-providers-details
	AccessIdentityProviderDetails(accountID, identityProviderID string) (AccessIdentityProvider, error)
	// CreateAccessIdentityProvider creates a new Access Identity Provider.
	//
	// API reference: https://api.cloudflare.com/#access-identity-providers-create-access-identity-provider
	CreateAccessIdentityProvider(accountID string, identityProviderConfiguration AccessIdentityProvider) (AccessIdentityProvider, error)
	// UpdateAccessIdentityProvider updates an existing Access Identity
	// Provider.
	//
	// API reference: https://api.cloudflare.com/#access-identity-providers-create-access-identity-provider
	UpdateAccessIdentityProvider(accountID, identityProviderUUID string, identityProviderConfiguration AccessIdentityProvider) (AccessIdentityProvider, error)
	// DeleteAccessIdentityProvider deletes an Access Identity Provider.
	//
	// API reference: https://api.cloudflare.com/#access-identity-providers-create-access-identity-provider
	DeleteAccessIdentityProvider(accountID, identityProviderUUID string) (AccessIdentityProvider, error)
	// AccessOrganization returns the Access organisation details.
	//
	// API reference: https://api.cloudflare.com/#access-organizations-access-organization-details
	AccessOrganization(accountID string) (AccessOrganization, ResultInfo, error)
	// CreateAccessOrganization creates the Access organisation details.
	//
	// API reference: https://api.cloudflare.com/#access-organizations-create-access-organization
	CreateAccessOrganization(accountID string, accessOrganization AccessOrganization) (AccessOrganization, error)
	// UpdateAccessOrganization creates the Access organisation details.
	//
	// API reference: https://api.cloudflare.com/#access-organizations-update-access-organization
	UpdateAccessOrganization(accountID string, accessOrganization AccessOrganization) (AccessOrganization, error)
	// AccessPolicies returns all access policies for an access application.
	//
	// API reference: https://api.cloudflare.com/#access-policy-list-access-policies
	AccessPolicies(zoneID, applicationID string, pageOpts PaginationOptions) ([]AccessPolicy, ResultInfo, error)
	// AccessPolicy returns a single policy based on the policy ID.
	//
	// API reference: https://api.cloudflare.com/#access-policy-access-policy-details
	AccessPolicy(zoneID, applicationID, policyID string) (AccessPolicy, error)
	// CreateAccessPolicy creates a new access policy.
	//
	// API reference: https://api.cloudflare.com/#access-policy-create-access-policy
	CreateAccessPolicy(zoneID, applicationID string, accessPolicy AccessPolicy) (AccessPolicy, error)
	// UpdateAccessPolicy updates an existing access policy.
	//
	// API reference: https://api.cloudflare.com/#access-policy-update-access-policy
	UpdateAccessPolicy(zoneID, applicationID string, accessPolicy AccessPolicy) (AccessPolicy, error)
	// DeleteAccessPolicy deletes an access policy.
	//
	// API reference: https://api.cloudflare.com/#access-policy-update-access-policy
	DeleteAccessPolicy(zoneID, applicationID, accessPolicyID string) error
	// AccessServiceTokens returns all Access Service Tokens for an account.
	//
	// API reference: https://api.cloudflare.com/#access-service-tokens-list-access-service-tokens
	AccessServiceTokens(accountID string) ([]AccessServiceToken, ResultInfo, error)
	// CreateAccessServiceToken creates a new Access Service Token for an account.
	//
	// API reference: https://api.cloudflare.com/#access-service-tokens-create-access-service-token
	CreateAccessServiceToken(accountID, name string) (AccessServiceTokenCreateResponse, error)
	// UpdateAccessServiceToken updates an existing Access Service Token for an
	// account.
	//
	// API reference: https://api.cloudflare.com/#access-service-tokens-update-access-service-token
	UpdateAccessServiceToken(accountID, uuid, name string) (AccessServiceTokenUpdateResponse, error)
	// DeleteAccessServiceToken removes an existing Access Service Token for an
	// account.
	//
	// API reference: https://api.cloudflare.com/#access-service-tokens-delete-access-service-token
	DeleteAccessServiceToken(accountID, uuid string) (AccessServiceTokenUpdateResponse, error)
	// AccountMembers returns all members of an account.
	//
	// API reference: https://api.cloudflare.com/#accounts-list-accounts
	AccountMembers(accountID string, pageOpts PaginationOptions) ([]AccountMember, ResultInfo, error)
	// CreateAccountMember invites a new member to join an account.
	//
	// API reference: https://api.cloudflare.com/#account-members-add-member
	CreateAccountMember(accountID string, emailAddress string, roles []string) (AccountMember, error)
	// DeleteAccountMember removes a member from an account.
	//
	// API reference: https://api.cloudflare.com/#account-members-remove-member
	DeleteAccountMember(accountID string, userID string) error
	// UpdateAccountMember modifies an existing account member.
	//
	// API reference: https://api.cloudflare.com/#account-members-update-member
	UpdateAccountMember(accountID string, userID string, member AccountMember) (AccountMember, error)
	// AccountMember returns details of a single account member.
	//
	// API reference: https://api.cloudflare.com/#account-members-member-details
	AccountMember(accountID string, memberID string) (AccountMember, error)
	// AccountRoles returns all roles of an account.
	//
	// API reference: https://api.cloudflare.com/#account-roles-list-roles
	AccountRoles(accountID string) ([]AccountRole, error)
	// AccountRole returns the details of a single account role.
	//
	// API reference: https://api.cloudflare.com/#account-roles-role-details
	AccountRole(accountID string, roleID string) (AccountRole, error)
	// Accounts returns all accounts the logged in user has access to.
	//
	// API reference: https://api.cloudflare.com/#accounts-list-accounts
	Accounts(pageOpts PaginationOptions) ([]Account, ResultInfo, error)
	// Account returns a single account based on the ID.
	//
	// API reference: https://api.cloudflare.com/#accounts-account-details
	Account(accountID string) (Account, ResultInfo, error)
	// UpdateAccount allows management of an account using the account ID.
	//
	// API reference: https://api.cloudflare.com/#accounts-update-account
	UpdateAccount(accountID string, account Account) (Account, error)
	// ArgoSmartRouting returns the current settings for smart routing.
	//
	// API reference: https://api.cloudflare.com/#argo-smart-routing-get-argo-smart-routing-setting
	ArgoSmartRouting(zoneID string) (ArgoFeatureSetting, error)
	// UpdateArgoSmartRouting updates the setting for smart routing.
	//
	// API reference: https://api.cloudflare.com/#argo-smart-routing-patch-argo-smart-routing-setting
	UpdateArgoSmartRouting(zoneID, settingValue string) (ArgoFeatureSetting, error)
	// ArgoTieredCaching returns the current settings for tiered caching.
	//
	// API reference: TBA
	ArgoTieredCaching(zoneID string) (ArgoFeatureSetting, error)
	// UpdateArgoTieredCaching updates the setting for tiered caching.
	//
	// API reference: TBA
	UpdateArgoTieredCaching(zoneID, settingValue string) (ArgoFeatureSetting, error)
	// GetOrganizationAuditLogs will return the audit logs of a specific
	// organization, based on the ID passed in. The audit logs can be
	// filtered based on any argument in the AuditLogFilter
	//
	// API Reference: https://api.cloudflare.com/#audit-logs-list-organization-audit-logs
	GetOrganizationAuditLogs(organizationID string, a AuditLogFilter) (AuditLogResponse, error)
	// GetUserAuditLogs will return your user's audit logs. The audit logs can be
	// filtered based on any argument in the AuditLogFilter
	//
	// API Reference: https://api.cloudflare.com/#audit-logs-list-user-audit-logs
	GetUserAuditLogs(a AuditLogFilter) (AuditLogResponse, error)
	// SetAuthType sets the authentication method (AuthKeyEmail, AuthToken, or AuthUserService).
	SetAuthType(authType int)
	// ZoneIDByName retrieves a zone's ID from the name.
	ZoneIDByName(zoneName string) (string, error)
	// Raw makes a HTTP request with user provided params and returns the
	// result as untouched JSON.
	Raw(method, endpoint string, data interface{}) (json.RawMessage, error)
	// UpdateCustomHostnameSSL modifies SSL configuration for the given custom
	// hostname in the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-for-a-zone-update-custom-hostname-configuration
	UpdateCustomHostnameSSL(zoneID string, customHostnameID string, ssl CustomHostnameSSL) (*CustomHostnameResponse, error)
	// UpdateCustomHostname modifies configuration for the given custom
	// hostname in the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-for-a-zone-update-custom-hostname-configuration
	UpdateCustomHostname(zoneID string, customHostnameID string, ch CustomHostname) (*CustomHostnameResponse, error)
	// DeleteCustomHostname deletes a custom hostname (and any issued SSL
	// certificates).
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-for-a-zone-delete-a-custom-hostname-and-any-issued-ssl-certificates-
	DeleteCustomHostname(zoneID string, customHostnameID string) error
	// CreateCustomHostname creates a new custom hostname and requests that an SSL certificate be issued for it.
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-for-a-zone-create-custom-hostname
	CreateCustomHostname(zoneID string, ch CustomHostname) (*CustomHostnameResponse, error)
	// CustomHostnames fetches custom hostnames for the given zone,
	// by applying filter.Hostname if not empty and scoping the result to page'th 50 items.
	//
	// The returned ResultInfo can be used to implement pagination.
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-for-a-zone-list-custom-hostnames
	CustomHostnames(zoneID string, page int, filter CustomHostname) ([]CustomHostname, ResultInfo, error)
	// CustomHostname inspects the given custom hostname in the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-for-a-zone-custom-hostname-configuration-details
	CustomHostname(zoneID string, customHostnameID string) (CustomHostname, error)
	// CustomHostnameIDByName retrieves the ID for the given hostname in the given zone.
	CustomHostnameIDByName(zoneID string, hostname string) (string, error)
	// UpdateCustomHostnameFallbackOrigin modifies the Custom Hostname Fallback origin in the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-fallback-origin-for-a-zone-update-fallback-origin-for-custom-hostnames
	UpdateCustomHostnameFallbackOrigin(zoneID string, chfo CustomHostnameFallbackOrigin) (*CustomHostnameFallbackOriginResponse, error)
	// CustomHostnameFallbackOrigin inspects the Custom Hostname Fallback origin in the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-hostname-fallback-origin-for-a-zone-properties
	CustomHostnameFallbackOrigin(zoneID string) (CustomHostnameFallbackOrigin, error)
	// CustomPages lists custom pages for a zone or account.
	//
	// Zone API reference: https://api.cloudflare.com/#custom-pages-for-a-zone-list-available-custom-pages
	// Account API reference: https://api.cloudflare.com/#custom-pages-account--list-custom-pages
	CustomPages(options *CustomPageOptions) ([]CustomPage, error)
	// CustomPage lists a single custom page based on the ID.
	//
	// Zone API reference: https://api.cloudflare.com/#custom-pages-for-a-zone-custom-page-details
	// Account API reference: https://api.cloudflare.com/#custom-pages-account--custom-page-details
	CustomPage(options *CustomPageOptions, customPageID string) (CustomPage, error)
	// UpdateCustomPage updates a single custom page setting.
	//
	// Zone API reference: https://api.cloudflare.com/#custom-pages-for-a-zone-update-custom-page-url
	// Account API reference: https://api.cloudflare.com/#custom-pages-account--update-custom-page
	UpdateCustomPage(options *CustomPageOptions, customPageID string, pageParameters CustomPageParameters) (CustomPage, error)
	// CreateDNSRecord creates a DNS record for the zone identifier.
	//
	// API reference: https://api.cloudflare.com/#dns-records-for-a-zone-create-dns-record
	CreateDNSRecord(zoneID string, rr DNSRecord) (*DNSRecordResponse, error)
	// DNSRecords returns a slice of DNS records for the given zone identifier.
	//
	// This takes a DNSRecord to allow filtering of the results returned.
	//
	// API reference: https://api.cloudflare.com/#dns-records-for-a-zone-list-dns-records
	DNSRecords(zoneID string, rr DNSRecord) ([]DNSRecord, error)
	// DNSRecord returns a single DNS record for the given zone & record
	// identifiers.
	//
	// API reference: https://api.cloudflare.com/#dns-records-for-a-zone-dns-record-details
	DNSRecord(zoneID, recordID string) (DNSRecord, error)
	// UpdateDNSRecord updates a single DNS record for the given zone & record
	// identifiers.
	//
	// API reference: https://api.cloudflare.com/#dns-records-for-a-zone-update-dns-record
	UpdateDNSRecord(zoneID, recordID string, rr DNSRecord) error
	// DeleteDNSRecord deletes a single DNS record for the given zone & record
	// identifiers.
	//
	// API reference: https://api.cloudflare.com/#dns-records-for-a-zone-delete-dns-record
	DeleteDNSRecord(zoneID, recordID string) error
	// Filter returns a single filter in a zone based on the filter ID.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/get/#get-by-filter-id
	Filter(zoneID, filterID string) (Filter, error)
	// Filters returns all filters for a zone.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/get/#get-all-filters
	Filters(zoneID string, pageOpts PaginationOptions) ([]Filter, error)
	// CreateFilters creates new filters.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/post/
	CreateFilters(zoneID string, filters []Filter) ([]Filter, error)
	// UpdateFilter updates a single filter.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/put/#update-a-single-filter
	UpdateFilter(zoneID string, filter Filter) (Filter, error)
	// UpdateFilters updates many filters at once.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/put/#update-multiple-filters
	UpdateFilters(zoneID string, filters []Filter) ([]Filter, error)
	// DeleteFilter deletes a single filter.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/delete/#delete-a-single-filter
	DeleteFilter(zoneID, filterID string) error
	// DeleteFilters deletes multiple filters.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/delete/#delete-multiple-filters
	DeleteFilters(zoneID string, filterIDs []string) error
	// ValidateFilterExpression checks correctness of a filter expression.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-filters/validation/
	ValidateFilterExpression(expression string) error
	// ListUserAccessRules returns a slice of access rules for the logged-in user.
	//
	// This takes an AccessRule to allow filtering of the results returned.
	//
	// API reference: https://api.cloudflare.com/#user-level-firewall-access-rule-list-access-rules
	ListUserAccessRules(accessRule AccessRule, page int) (*AccessRuleListResponse, error)
	// CreateUserAccessRule creates a firewall access rule for the logged-in user.
	//
	// API reference: https://api.cloudflare.com/#user-level-firewall-access-rule-create-access-rule
	CreateUserAccessRule(accessRule AccessRule) (*AccessRuleResponse, error)
	// UserAccessRule returns the details of a user's account access rule.
	//
	// API reference: https://api.cloudflare.com/#user-level-firewall-access-rule-list-access-rules
	UserAccessRule(accessRuleID string) (*AccessRuleResponse, error)
	// UpdateUserAccessRule updates a single access rule for the logged-in user &
	// given access rule identifier.
	//
	// API reference: https://api.cloudflare.com/#user-level-firewall-access-rule-update-access-rule
	UpdateUserAccessRule(accessRuleID string, accessRule AccessRule) (*AccessRuleResponse, error)
	// DeleteUserAccessRule deletes a single access rule for the logged-in user and
	// access rule identifiers.
	//
	// API reference: https://api.cloudflare.com/#user-level-firewall-access-rule-update-access-rule
	DeleteUserAccessRule(accessRuleID string) (*AccessRuleResponse, error)
	// ListZoneAccessRules returns a slice of access rules for the given zone
	// identifier.
	//
	// This takes an AccessRule to allow filtering of the results returned.
	//
	// API reference: https://api.cloudflare.com/#firewall-access-rule-for-a-zone-list-access-rules
	ListZoneAccessRules(zoneID string, accessRule AccessRule, page int) (*AccessRuleListResponse, error)
	// CreateZoneAccessRule creates a firewall access rule for the given zone
	// identifier.
	//
	// API reference: https://api.cloudflare.com/#firewall-access-rule-for-a-zone-create-access-rule
	CreateZoneAccessRule(zoneID string, accessRule AccessRule) (*AccessRuleResponse, error)
	// ZoneAccessRule returns the details of a zone's access rule.
	//
	// API reference: https://api.cloudflare.com/#firewall-access-rule-for-a-zone-list-access-rules
	ZoneAccessRule(zoneID string, accessRuleID string) (*AccessRuleResponse, error)
	// UpdateZoneAccessRule updates a single access rule for the given zone &
	// access rule identifiers.
	//
	// API reference: https://api.cloudflare.com/#firewall-access-rule-for-a-zone-update-access-rule
	UpdateZoneAccessRule(zoneID, accessRuleID string, accessRule AccessRule) (*AccessRuleResponse, error)
	// DeleteZoneAccessRule deletes a single access rule for the given zone and
	// access rule identifiers.
	//
	// API reference: https://api.cloudflare.com/#firewall-access-rule-for-a-zone-delete-access-rule
	DeleteZoneAccessRule(zoneID, accessRuleID string) (*AccessRuleResponse, error)
	// ListAccountAccessRules returns a slice of access rules for the given
	// account identifier.
	//
	// This takes an AccessRule to allow filtering of the results returned.
	//
	// API reference: https://api.cloudflare.com/#account-level-firewall-access-rule-list-access-rules
	ListAccountAccessRules(accountID string, accessRule AccessRule, page int) (*AccessRuleListResponse, error)
	// CreateAccountAccessRule creates a firewall access rule for the given
	// account identifier.
	//
	// API reference: https://api.cloudflare.com/#account-level-firewall-access-rule-create-access-rule
	CreateAccountAccessRule(accountID string, accessRule AccessRule) (*AccessRuleResponse, error)
	// AccountAccessRule returns the details of an account's access rule.
	//
	// API reference: https://api.cloudflare.com/#account-level-firewall-access-rule-access-rule-details
	AccountAccessRule(accountID string, accessRuleID string) (*AccessRuleResponse, error)
	// UpdateAccountAccessRule updates a single access rule for the given
	// account & access rule identifiers.
	//
	// API reference: https://api.cloudflare.com/#account-level-firewall-access-rule-update-access-rule
	UpdateAccountAccessRule(accountID, accessRuleID string, accessRule AccessRule) (*AccessRuleResponse, error)
	// DeleteAccountAccessRule deletes a single access rule for the given
	// account and access rule identifiers.
	//
	// API reference: https://api.cloudflare.com/#account-level-firewall-access-rule-delete-access-rule
	DeleteAccountAccessRule(accountID, accessRuleID string) (*AccessRuleResponse, error)
	// FirewallRules returns all firewall rules.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-firewall-rules/get/#get-all-rules
	FirewallRules(zoneID string, pageOpts PaginationOptions) ([]FirewallRule, error)
	// FirewallRule returns a single firewall rule based on the ID.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-firewall-rules/get/#get-by-rule-id
	FirewallRule(zoneID, firewallRuleID string) (FirewallRule, error)
	// CreateFirewallRules creates new firewall rules.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-firewall-rules/post/
	CreateFirewallRules(zoneID string, firewallRules []FirewallRule) ([]FirewallRule, error)
	// UpdateFirewallRule updates a single firewall rule.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-firewall-rules/put/#update-a-single-rule
	UpdateFirewallRule(zoneID string, firewallRule FirewallRule) (FirewallRule, error)
	// UpdateFirewallRules updates a single firewall rule.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-firewall-rules/put/#update-multiple-rules
	UpdateFirewallRules(zoneID string, firewallRules []FirewallRule) ([]FirewallRule, error)
	// DeleteFirewallRule updates a single firewall rule.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-firewall-rules/delete/#delete-a-single-rule
	DeleteFirewallRule(zoneID, firewallRuleID string) error
	// DeleteFirewallRules updates a single firewall rule.
	//
	// API reference: https://developers.cloudflare.com/firewall/api/cf-firewall-rules/delete/#delete-multiple-rules
	DeleteFirewallRules(zoneID string, firewallRuleIDs []string) error
	// Healthchecks returns all healthchecks for a zone.
	//
	// API reference: https://api.cloudflare.com/#health-checks-list-health-checks
	Healthchecks(zoneID string) ([]Healthcheck, error)
	// Healthcheck returns a single healthcheck by ID.
	//
	// API reference: https://api.cloudflare.com/#health-checks-health-check-details
	Healthcheck(zoneID, healthcheckID string) (Healthcheck, error)
	// CreateHealthcheck creates a new healthcheck in a zone.
	//
	// API reference: https://api.cloudflare.com/#health-checks-create-health-check
	CreateHealthcheck(zoneID string, healthcheck Healthcheck) (Healthcheck, error)
	// UpdateHealthcheck updates an existing healthcheck.
	//
	// API reference: https://api.cloudflare.com/#health-checks-update-health-check
	UpdateHealthcheck(zoneID string, healthcheckID string, healthcheck Healthcheck) (Healthcheck, error)
	// DeleteHealthcheck deletes a healthcheck in a zone.
	//
	// API reference: https://api.cloudflare.com/#health-checks-delete-health-check
	DeleteHealthcheck(zoneID string, healthcheckID string) error
	// CreateHealthcheckPreview creates a new preview of a healthcheck in a zone.
	//
	// API reference: https://api.cloudflare.com/#health-checks-create-preview-health-check
	CreateHealthcheckPreview(zoneID string, healthcheck Healthcheck) (Healthcheck, error)
	// HealthcheckPreview returns a single healthcheck preview by its ID.
	//
	// API reference: https://api.cloudflare.com/#health-checks-health-check-preview-details
	HealthcheckPreview(zoneID, id string) (Healthcheck, error)
	// DeleteHealthcheckPreview deletes a healthcheck preview in a zone if it exists.
	//
	// API reference: https://api.cloudflare.com/#health-checks-delete-preview-health-check
	DeleteHealthcheckPreview(zoneID string, id string) error
	// ListPrefixes lists all IP prefixes for a given account
	//
	// API reference: https://api.cloudflare.com/#ip-address-management-prefixes-list-prefixes
	ListPrefixes(ctx context.Context) ([]IPPrefix, error)
	// GetPrefix returns a specific IP prefix
	//
	// API reference: https://api.cloudflare.com/#ip-address-management-prefixes-prefix-details
	GetPrefix(ctx context.Context, id string) (IPPrefix, error)
	// UpdatePrefixDescription edits the description of the IP prefix
	//
	// API reference: https://api.cloudflare.com/#ip-address-management-prefixes-update-prefix-description
	UpdatePrefixDescription(ctx context.Context, id string, description string) (IPPrefix, error)
	// GetAdvertisementStatus returns the BGP status of the IP prefix
	//
	// API reference: https://api.cloudflare.com/#ip-address-management-prefixes-update-prefix-description
	GetAdvertisementStatus(ctx context.Context, id string) (AdvertisementStatus, error)
	// UpdateAdvertisementStatus changes the BGP status of an IP prefix
	//
	// API reference: https://api.cloudflare.com/#ip-address-management-prefixes-update-prefix-description
	UpdateAdvertisementStatus(ctx context.Context, id string, advertised bool) (AdvertisementStatus, error)
	// CreateKeyless creates a new Keyless SSL configuration for the zone.
	//
	// API reference: https://api.cloudflare.com/#keyless-ssl-for-a-zone-create-a-keyless-ssl-configuration
	CreateKeyless()
	// ListKeyless lists Keyless SSL configurations for a zone.
	//
	// API reference: https://api.cloudflare.com/#keyless-ssl-for-a-zone-list-keyless-ssls
	ListKeyless()
	// Keyless provides the configuration for a given Keyless SSL identifier.
	//
	// API reference: https://api.cloudflare.com/#keyless-ssl-for-a-zone-keyless-ssl-details
	Keyless()
	// UpdateKeyless updates an existing Keyless SSL configuration.
	//
	// API reference: https://api.cloudflare.com/#keyless-ssl-for-a-zone-update-keyless-configuration
	UpdateKeyless()
	// DeleteKeyless deletes an existing Keyless SSL configuration.
	//
	// API reference: https://api.cloudflare.com/#keyless-ssl-for-a-zone-delete-keyless-configuration
	DeleteKeyless()
	// CreateLoadBalancerPool creates a new load balancer pool.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-pools-create-pool
	CreateLoadBalancerPool(pool LoadBalancerPool) (LoadBalancerPool, error)
	// ListLoadBalancerPools lists load balancer pools connected to an account.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-pools-list-pools
	ListLoadBalancerPools() ([]LoadBalancerPool, error)
	// LoadBalancerPoolDetails returns the details for a load balancer pool.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-pools-pool-details
	LoadBalancerPoolDetails(poolID string) (LoadBalancerPool, error)
	// DeleteLoadBalancerPool disables and deletes a load balancer pool.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-pools-delete-pool
	DeleteLoadBalancerPool(poolID string) error
	// ModifyLoadBalancerPool modifies a configured load balancer pool.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-pools-update-pool
	ModifyLoadBalancerPool(pool LoadBalancerPool) (LoadBalancerPool, error)
	// CreateLoadBalancerMonitor creates a new load balancer monitor.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-monitors-create-monitor
	CreateLoadBalancerMonitor(monitor LoadBalancerMonitor) (LoadBalancerMonitor, error)
	// ListLoadBalancerMonitors lists load balancer monitors connected to an account.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-monitors-list-monitors
	ListLoadBalancerMonitors() ([]LoadBalancerMonitor, error)
	// LoadBalancerMonitorDetails returns the details for a load balancer monitor.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-monitors-monitor-details
	LoadBalancerMonitorDetails(monitorID string) (LoadBalancerMonitor, error)
	// DeleteLoadBalancerMonitor disables and deletes a load balancer monitor.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-monitors-delete-monitor
	DeleteLoadBalancerMonitor(monitorID string) error
	// ModifyLoadBalancerMonitor modifies a configured load balancer monitor.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-monitors-update-monitor
	ModifyLoadBalancerMonitor(monitor LoadBalancerMonitor) (LoadBalancerMonitor, error)
	// CreateLoadBalancer creates a new load balancer.
	//
	// API reference: https://api.cloudflare.com/#load-balancers-create-load-balancer
	CreateLoadBalancer(zoneID string, lb LoadBalancer) (LoadBalancer, error)
	// ListLoadBalancers lists load balancers configured on a zone.
	//
	// API reference: https://api.cloudflare.com/#load-balancers-list-load-balancers
	ListLoadBalancers(zoneID string) ([]LoadBalancer, error)
	// LoadBalancerDetails returns the details for a load balancer.
	//
	// API reference: https://api.cloudflare.com/#load-balancers-load-balancer-details
	LoadBalancerDetails(zoneID, lbID string) (LoadBalancer, error)
	// DeleteLoadBalancer disables and deletes a load balancer.
	//
	// API reference: https://api.cloudflare.com/#load-balancers-delete-load-balancer
	DeleteLoadBalancer(zoneID, lbID string) error
	// ModifyLoadBalancer modifies a configured load balancer.
	//
	// API reference: https://api.cloudflare.com/#load-balancers-update-load-balancer
	ModifyLoadBalancer(zoneID string, lb LoadBalancer) (LoadBalancer, error)
	// PoolHealthDetails fetches the latest healtcheck details for a single pool.
	//
	// API reference: https://api.cloudflare.com/#load-balancer-pools-pool-health-details
	PoolHealthDetails(poolID string) (LoadBalancerPoolHealth, error)
	// CreateZoneLockdown creates a Zone ZoneLockdown rule for the given zone ID.
	//
	// API reference: https://api.cloudflare.com/#zone-ZoneLockdown-create-a-ZoneLockdown-rule
	CreateZoneLockdown(zoneID string, ld ZoneLockdown) (*ZoneLockdownResponse, error)
	// UpdateZoneLockdown updates a Zone ZoneLockdown rule (based on the ID) for the
	// given zone ID.
	//
	// API reference: https://api.cloudflare.com/#zone-ZoneLockdown-update-ZoneLockdown-rule
	UpdateZoneLockdown(zoneID string, id string, ld ZoneLockdown) (*ZoneLockdownResponse, error)
	// DeleteZoneLockdown deletes a Zone ZoneLockdown rule (based on the ID) for the
	// given zone ID.
	//
	// API reference: https://api.cloudflare.com/#zone-ZoneLockdown-delete-ZoneLockdown-rule
	DeleteZoneLockdown(zoneID string, id string) (*ZoneLockdownResponse, error)
	// ZoneLockdown retrieves a Zone ZoneLockdown rule (based on the ID) for the
	// given zone ID.
	//
	// API reference: https://api.cloudflare.com/#zone-ZoneLockdown-ZoneLockdown-rule-details
	ZoneLockdown(zoneID string, id string) (*ZoneLockdownResponse, error)
	// ListZoneLockdowns retrieves a list of Zone ZoneLockdown rules for a given
	// zone ID by page number.
	//
	// API reference: https://api.cloudflare.com/#zone-ZoneLockdown-list-ZoneLockdown-rules
	ListZoneLockdowns(zoneID string, page int) (*ZoneLockdownListResponse, error)
	// GetLogpullRetentionFlag gets the current setting flag.
	//
	// API reference: https://developers.cloudflare.com/logs/logpull-api/enabling-log-retention/
	GetLogpullRetentionFlag(zoneID string) (*LogpullRetentionConfiguration, error)
	// SetLogpullRetentionFlag updates the retention flag to the defined boolean.
	//
	// API reference: https://developers.cloudflare.com/logs/logpull-api/enabling-log-retention/
	SetLogpullRetentionFlag(zoneID string, enabled bool) (*LogpullRetentionConfiguration, error)
	// CreateLogpushJob creates a new LogpushJob for a zone.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-create-logpush-job
	CreateLogpushJob(zoneID string, job LogpushJob) (*LogpushJob, error)
	// LogpushJobs returns all Logpush Jobs for a zone.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-list-logpush-jobs
	LogpushJobs(zoneID string) ([]LogpushJob, error)
	// LogpushJobsForDataset returns all Logpush Jobs for a dataset in a zone.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-list-logpush-jobs-for-a-dataset
	LogpushJobsForDataset(zoneID, dataset string) ([]LogpushJob, error)
	// LogpushFields returns fields for a given dataset.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-list-logpush-jobs
	LogpushFields(zoneID, dataset string) (LogpushFields, error)
	// LogpushJob fetches detail about one Logpush Job for a zone.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-logpush-job-details
	LogpushJob(zoneID string, jobID int) (LogpushJob, error)
	// UpdateLogpushJob lets you update a Logpush Job.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-update-logpush-job
	UpdateLogpushJob(zoneID string, jobID int, job LogpushJob) error
	// DeleteLogpushJob deletes a Logpush Job for a zone.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-delete-logpush-job
	DeleteLogpushJob(zoneID string, jobID int) error
	// GetLogpushOwnershipChallenge returns ownership challenge.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-get-ownership-challenge
	GetLogpushOwnershipChallenge(zoneID, destinationConf string) (*LogpushGetOwnershipChallenge, error)
	// ValidateLogpushOwnershipChallenge returns ownership challenge validation result.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-validate-ownership-challenge
	ValidateLogpushOwnershipChallenge(zoneID, destinationConf, ownershipChallenge string) (bool, error)
	// CheckLogpushDestinationExists returns destination exists check result.
	//
	// API reference: https://api.cloudflare.com/#logpush-jobs-check-destination-exists
	CheckLogpushDestinationExists(zoneID, destinationConf string) (bool, error)
	// CreateOriginCertificate creates a Cloudflare-signed certificate.
	//
	// This function requires api.APIUserServiceKey be set to your Certificates API key.
	//
	// API reference: https://api.cloudflare.com/#cloudflare-ca-create-certificate
	CreateOriginCertificate(certificate OriginCACertificate) (*OriginCACertificate, error)
	// OriginCertificates lists all Cloudflare-issued certificates.
	//
	// This function requires api.APIUserServiceKey be set to your Certificates API key.
	//
	// API reference: https://api.cloudflare.com/#cloudflare-ca-list-certificates
	OriginCertificates(options OriginCACertificateListOptions) ([]OriginCACertificate, error)
	// OriginCertificate returns the details for a Cloudflare-issued certificate.
	//
	// This function requires api.APIUserServiceKey be set to your Certificates API key.
	//
	// API reference: https://api.cloudflare.com/#cloudflare-ca-certificate-details
	OriginCertificate(certificateID string) (*OriginCACertificate, error)
	// RevokeOriginCertificate revokes a created certificate for a zone.
	//
	// This function requires api.APIUserServiceKey be set to your Certificates API key.
	//
	// API reference: https://api.cloudflare.com/#cloudflare-ca-revoke-certificate
	RevokeOriginCertificate(certificateID string) (*OriginCACertificateID, error)
	// CreatePageRule creates a new Page Rule for a zone.
	//
	// API reference: https://api.cloudflare.com/#page-rules-for-a-zone-create-a-page-rule
	CreatePageRule(zoneID string, rule PageRule) (*PageRule, error)
	// ListPageRules returns all Page Rules for a zone.
	//
	// API reference: https://api.cloudflare.com/#page-rules-for-a-zone-list-page-rules
	ListPageRules(zoneID string) ([]PageRule, error)
	// PageRule fetches detail about one Page Rule for a zone.
	//
	// API reference: https://api.cloudflare.com/#page-rules-for-a-zone-page-rule-details
	PageRule(zoneID, ruleID string) (PageRule, error)
	// ChangePageRule lets you change individual settings for a Page Rule. This is
	// in contrast to UpdatePageRule which replaces the entire Page Rule.
	//
	// API reference: https://api.cloudflare.com/#page-rules-for-a-zone-change-a-page-rule
	ChangePageRule(zoneID, ruleID string, rule PageRule) error
	// UpdatePageRule lets you replace a Page Rule. This is in contrast to
	// ChangePageRule which lets you change individual settings.
	//
	// API reference: https://api.cloudflare.com/#page-rules-for-a-zone-update-a-page-rule
	UpdatePageRule(zoneID, ruleID string, rule PageRule) error
	// DeletePageRule deletes a Page Rule for a zone.
	//
	// API reference: https://api.cloudflare.com/#page-rules-for-a-zone-delete-a-page-rule
	DeletePageRule(zoneID, ruleID string) error
	// CreateRailgun creates a new Railgun.
	//
	// API reference: https://api.cloudflare.com/#railgun-create-railgun
	CreateRailgun(name string) (Railgun, error)
	// ListRailguns lists Railguns connected to an account.
	//
	// API reference: https://api.cloudflare.com/#railgun-list-railguns
	ListRailguns(options RailgunListOptions) ([]Railgun, error)
	// RailgunDetails returns the details for a Railgun.
	//
	// API reference: https://api.cloudflare.com/#railgun-railgun-details
	RailgunDetails(railgunID string) (Railgun, error)
	// RailgunZones returns the zones that are currently using a Railgun.
	//
	// API reference: https://api.cloudflare.com/#railgun-get-zones-connected-to-a-railgun
	RailgunZones(railgunID string) ([]Zone, error)
	// EnableRailgun enables a Railgun for all zones connected to it.
	//
	// API reference: https://api.cloudflare.com/#railgun-enable-or-disable-a-railgun
	EnableRailgun(railgunID string) (Railgun, error)
	// DisableRailgun enables a Railgun for all zones connected to it.
	//
	// API reference: https://api.cloudflare.com/#railgun-enable-or-disable-a-railgun
	DisableRailgun(railgunID string) (Railgun, error)
	// DeleteRailgun disables and deletes a Railgun.
	//
	// API reference: https://api.cloudflare.com/#railgun-delete-railgun
	DeleteRailgun(railgunID string) error
	// ZoneRailguns returns the available Railguns for a zone.
	//
	// API reference: https://api.cloudflare.com/#railguns-for-a-zone-get-available-railguns
	ZoneRailguns(zoneID string) ([]ZoneRailgun, error)
	// ZoneRailgunDetails returns the configuration for a given Railgun.
	//
	// API reference: https://api.cloudflare.com/#railguns-for-a-zone-get-railgun-details
	ZoneRailgunDetails(zoneID, railgunID string) (ZoneRailgun, error)
	// TestRailgunConnection tests a Railgun connection for a given zone.
	//
	// API reference: https://api.cloudflare.com/#railgun-connections-for-a-zone-test-railgun-connection
	TestRailgunConnection(zoneID, railgunID string) (RailgunDiagnosis, error)
	// ConnectZoneRailgun connects a Railgun for a given zone.
	//
	// API reference: https://api.cloudflare.com/#railguns-for-a-zone-connect-or-disconnect-a-railgun
	ConnectZoneRailgun(zoneID, railgunID string) (ZoneRailgun, error)
	// DisconnectZoneRailgun disconnects a Railgun for a given zone.
	//
	// API reference: https://api.cloudflare.com/#railguns-for-a-zone-connect-or-disconnect-a-railgun
	DisconnectZoneRailgun(zoneID, railgunID string) (ZoneRailgun, error)
	// CreateRateLimit creates a new rate limit for a zone.
	//
	// API reference: https://api.cloudflare.com/#rate-limits-for-a-zone-create-a-ratelimit
	CreateRateLimit(zoneID string, limit RateLimit) (RateLimit, error)
	// ListRateLimits returns Rate Limits for a zone, paginated according to the provided options
	//
	// API reference: https://api.cloudflare.com/#rate-limits-for-a-zone-list-rate-limits
	ListRateLimits(zoneID string, pageOpts PaginationOptions) ([]RateLimit, ResultInfo, error)
	// ListAllRateLimits returns all Rate Limits for a zone.
	//
	// API reference: https://api.cloudflare.com/#rate-limits-for-a-zone-list-rate-limits
	ListAllRateLimits(zoneID string) ([]RateLimit, error)
	// RateLimit fetches detail about one Rate Limit for a zone.
	//
	// API reference: https://api.cloudflare.com/#rate-limits-for-a-zone-rate-limit-details
	RateLimit(zoneID, limitID string) (RateLimit, error)
	// UpdateRateLimit lets you replace a Rate Limit for a zone.
	//
	// API reference: https://api.cloudflare.com/#rate-limits-for-a-zone-update-rate-limit
	UpdateRateLimit(zoneID, limitID string, limit RateLimit) (RateLimit, error)
	// DeleteRateLimit deletes a Rate Limit for a zone.
	//
	// API reference: https://api.cloudflare.com/#rate-limits-for-a-zone-delete-rate-limit
	DeleteRateLimit(zoneID, limitID string) error
	// RegistrarDomain returns a single domain based on the account ID and
	// domain name.
	//
	// API reference: https://api.cloudflare.com/#registrar-domains-get-domain
	RegistrarDomain(accountID, domainName string) (RegistrarDomain, error)
	// RegistrarDomains returns all registrar domains based on the account
	// ID.
	//
	// API reference: https://api.cloudflare.com/#registrar-domains-list-domains
	RegistrarDomains(accountID string) ([]RegistrarDomain, error)
	// TransferRegistrarDomain initiates the transfer from another registrar
	// to Cloudflare Registrar.
	//
	// API reference: https://api.cloudflare.com/#registrar-domains-transfer-domain
	TransferRegistrarDomain(accountID, domainName string) ([]RegistrarDomain, error)
	// CancelRegistrarDomainTransfer cancels a pending domain transfer.
	//
	// API reference: https://api.cloudflare.com/#registrar-domains-cancel-transfer
	CancelRegistrarDomainTransfer(accountID, domainName string) ([]RegistrarDomain, error)
	// UpdateRegistrarDomain updates an existing Registrar Domain configuration.
	//
	// API reference: https://api.cloudflare.com/#registrar-domains-update-domain
	UpdateRegistrarDomain(accountID, domainName string, domainConfiguration RegistrarDomainConfiguration) (RegistrarDomain, error)
	// SpectrumApplications fetches all of the Spectrum applications for a zone.
	//
	// API reference: https://developers.cloudflare.com/spectrum/api-reference/#list-spectrum-applications
	SpectrumApplications(zoneID string) ([]SpectrumApplication, error)
	// SpectrumApplication fetches a single Spectrum application based on the ID.
	//
	// API reference: https://developers.cloudflare.com/spectrum/api-reference/#list-spectrum-applications
	SpectrumApplication(zoneID string, applicationID string) (SpectrumApplication, error)
	// CreateSpectrumApplication creates a new Spectrum application.
	//
	// API reference: https://developers.cloudflare.com/spectrum/api-reference/#create-a-spectrum-application
	CreateSpectrumApplication(zoneID string, appDetails SpectrumApplication) (SpectrumApplication, error)
	// UpdateSpectrumApplication updates an existing Spectrum application.
	//
	// API reference: https://developers.cloudflare.com/spectrum/api-reference/#update-a-spectrum-application
	UpdateSpectrumApplication(zoneID, appID string, appDetails SpectrumApplication) (SpectrumApplication, error)
	// DeleteSpectrumApplication removes a Spectrum application based on the ID.
	//
	// API reference: https://developers.cloudflare.com/spectrum/api-reference/#delete-a-spectrum-application
	DeleteSpectrumApplication(zoneID string, applicationID string) error
	// CreateSSL allows you to add a custom SSL certificate to the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-ssl-for-a-zone-create-ssl-configuration
	CreateSSL(zoneID string, options ZoneCustomSSLOptions) (ZoneCustomSSL, error)
	// ListSSL lists the custom certificates for the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-ssl-for-a-zone-list-ssl-configurations
	ListSSL(zoneID string) ([]ZoneCustomSSL, error)
	// SSLDetails returns the configuration details for a custom SSL certificate.
	//
	// API reference: https://api.cloudflare.com/#custom-ssl-for-a-zone-ssl-configuration-details
	SSLDetails(zoneID, certificateID string) (ZoneCustomSSL, error)
	// UpdateSSL updates (replaces) a custom SSL certificate.
	//
	// API reference: https://api.cloudflare.com/#custom-ssl-for-a-zone-update-ssl-configuration
	UpdateSSL(zoneID, certificateID string, options ZoneCustomSSLOptions) (ZoneCustomSSL, error)
	// ReprioritizeSSL allows you to change the priority (which is served for a given
	// request) of custom SSL certificates associated with the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-ssl-for-a-zone-re-prioritize-ssl-certificates
	ReprioritizeSSL(zoneID string, p []ZoneCustomSSLPriority) ([]ZoneCustomSSL, error)
	// DeleteSSL deletes a custom SSL certificate from the given zone.
	//
	// API reference: https://api.cloudflare.com/#custom-ssl-for-a-zone-delete-an-ssl-certificate
	DeleteSSL(zoneID, certificateID string) error
	// UniversalSSLSettingDetails returns the details for a universal ssl setting
	//
	// API reference: https://api.cloudflare.com/#universal-ssl-settings-for-a-zone-universal-ssl-settings-details
	UniversalSSLSettingDetails(zoneID string) (UniversalSSLSetting, error)
	// EditUniversalSSLSetting edits the uniersal ssl setting for a zone
	//
	// API reference: https://api.cloudflare.com/#universal-ssl-settings-for-a-zone-edit-universal-ssl-settings
	EditUniversalSSLSetting(zoneID string, setting UniversalSSLSetting) (UniversalSSLSetting, error)
	// UniversalSSLVerificationDetails returns the details for a universal ssl verifcation
	//
	// API reference: https://api.cloudflare.com/#ssl-verification-ssl-verification-details
	UniversalSSLVerificationDetails(zoneID string) ([]UniversalSSLVerificationDetails, error)
	// UserDetails provides information about the logged-in user.
	//
	// API reference: https://api.cloudflare.com/#user-user-details
	UserDetails() (User, error)
	// UpdateUser updates the properties of the given user.
	//
	// API reference: https://api.cloudflare.com/#user-update-user
	UpdateUser(user *User) (User, error)
	// UserBillingProfile returns the billing profile of the user.
	//
	// API reference: https://api.cloudflare.com/#user-billing-profile
	UserBillingProfile() (UserBillingProfile, error)
	// CreateUserAgentRule creates a User-Agent Block rule for the given zone ID.
	//
	// API reference: https://api.cloudflare.com/#user-agent-blocking-rules-create-a-useragent-rule
	CreateUserAgentRule(zoneID string, ld UserAgentRule) (*UserAgentRuleResponse, error)
	// UpdateUserAgentRule updates a User-Agent Block rule (based on the ID) for the given zone ID.
	//
	// API reference: https://api.cloudflare.com/#user-agent-blocking-rules-update-useragent-rule
	UpdateUserAgentRule(zoneID string, id string, ld UserAgentRule) (*UserAgentRuleResponse, error)
	// DeleteUserAgentRule deletes a User-Agent Block rule (based on the ID) for the given zone ID.
	//
	// API reference: https://api.cloudflare.com/#user-agent-blocking-rules-delete-useragent-rule
	DeleteUserAgentRule(zoneID string, id string) (*UserAgentRuleResponse, error)
	// UserAgentRule retrieves a User-Agent Block rule (based on the ID) for the given zone ID.
	//
	// API reference: https://api.cloudflare.com/#user-agent-blocking-rules-useragent-rule-details
	UserAgentRule(zoneID string, id string) (*UserAgentRuleResponse, error)
	// ListUserAgentRules retrieves a list of User-Agent Block rules for a given zone ID by page number.
	//
	// API reference: https://api.cloudflare.com/#user-agent-blocking-rules-list-useragent-rules
	ListUserAgentRules(zoneID string, page int) (*UserAgentRuleListResponse, error)
	// CreateVirtualDNS creates a new Virtual DNS cluster.
	//
	// API reference: https://api.cloudflare.com/#virtual-dns-users--create-a-virtual-dns-cluster
	CreateVirtualDNS(v *VirtualDNS) (*VirtualDNS, error)
	// VirtualDNS fetches a single virtual DNS cluster.
	//
	// API reference: https://api.cloudflare.com/#virtual-dns-users--get-a-virtual-dns-cluster
	VirtualDNS(virtualDNSID string) (*VirtualDNS, error)
	// ListVirtualDNS lists the virtual DNS clusters associated with an account.
	//
	// API reference: https://api.cloudflare.com/#virtual-dns-users--get-virtual-dns-clusters
	ListVirtualDNS() ([]*VirtualDNS, error)
	// UpdateVirtualDNS updates a Virtual DNS cluster.
	//
	// API reference: https://api.cloudflare.com/#virtual-dns-users--modify-a-virtual-dns-cluster
	UpdateVirtualDNS(virtualDNSID string, vv VirtualDNS) error
	// DeleteVirtualDNS deletes a Virtual DNS cluster. Note that this cannot be
	// undone, and will stop all traffic to that cluster.
	//
	// API reference: https://api.cloudflare.com/#virtual-dns-users--delete-a-virtual-dns-cluster
	DeleteVirtualDNS(virtualDNSID string) error
	// VirtualDNSUserAnalytics retrieves analytics report for a specified dimension and time range
	VirtualDNSUserAnalytics(virtualDNSID string, o VirtualDNSUserAnalyticsOptions) (VirtualDNSAnalytics, error)
	// ListWAFPackages returns a slice of the WAF packages for the given zone.
	//
	// API Reference: https://api.cloudflare.com/#waf-rule-packages-list-firewall-packages
	ListWAFPackages(zoneID string) ([]WAFPackage, error)
	// WAFPackage returns a WAF package for the given zone.
	//
	// API Reference: https://api.cloudflare.com/#waf-rule-packages-firewall-package-details
	WAFPackage(zoneID, packageID string) (WAFPackage, error)
	// UpdateWAFPackage lets you update the a WAF Package.
	//
	// API Reference: https://api.cloudflare.com/#waf-rule-packages-edit-firewall-package
	UpdateWAFPackage(zoneID, packageID string, opts WAFPackageOptions) (WAFPackage, error)
	// ListWAFGroups returns a slice of the WAF groups for the given WAF package.
	//
	// API Reference: https://api.cloudflare.com/#waf-rule-groups-list-rule-groups
	ListWAFGroups(zoneID, packageID string) ([]WAFGroup, error)
	// WAFGroup returns a WAF rule group from the given WAF package.
	//
	// API Reference: https://api.cloudflare.com/#waf-rule-groups-rule-group-details
	WAFGroup(zoneID, packageID, groupID string) (WAFGroup, error)
	// UpdateWAFGroup lets you update the mode of a WAF Group.
	//
	// API Reference: https://api.cloudflare.com/#waf-rule-groups-edit-rule-group
	UpdateWAFGroup(zoneID, packageID, groupID, mode string) (WAFGroup, error)
	// ListWAFRules returns a slice of the WAF rules for the given WAF package.
	//
	// API Reference: https://api.cloudflare.com/#waf-rules-list-rules
	ListWAFRules(zoneID, packageID string) ([]WAFRule, error)
	// WAFRule returns a WAF rule from the given WAF package.
	//
	// API Reference: https://api.cloudflare.com/#waf-rules-rule-details
	WAFRule(zoneID, packageID, ruleID string) (WAFRule, error)
	// UpdateWAFRule lets you update the mode of a WAF Rule.
	//
	// API Reference: https://api.cloudflare.com/#waf-rules-edit-rule
	UpdateWAFRule(zoneID, packageID, ruleID, mode string) (WAFRule, error)
	// ListWAFOverrides returns a slice of the WAF overrides.
	//
	// API Reference: https://api.cloudflare.com/#waf-overrides-list-uri-controlled-waf-configurations
	ListWAFOverrides(zoneID string) ([]WAFOverride, error)
	// WAFOverride returns a WAF override from the given override ID.
	//
	// API Reference: https://api.cloudflare.com/#waf-overrides-uri-controlled-waf-configuration-details
	WAFOverride(zoneID, overrideID string) (WAFOverride, error)
	// CreateWAFOverride creates a new WAF override.
	//
	// API reference: https://api.cloudflare.com/#waf-overrides-create-a-uri-controlled-waf-configuration
	CreateWAFOverride(zoneID string, override WAFOverride) (WAFOverride, error)
	// UpdateWAFOverride updates an existing WAF override.
	//
	// API reference: https://api.cloudflare.com/#waf-overrides-update-uri-controlled-waf-configuration
	UpdateWAFOverride(zoneID, overrideID string, override WAFOverride) (WAFOverride, error)
	// DeleteWAFOverride deletes a WAF override for a zone.
	//
	// API reference: https://api.cloudflare.com/#waf-overrides-delete-lockdown-rule
	DeleteWAFOverride(zoneID, overrideID string) error
	// DeleteWorker deletes worker for a zone.
	//
	// API reference: https://api.cloudflare.com/#worker-script-delete-worker
	DeleteWorker(requestParams *WorkerRequestParams) (WorkerScriptResponse, error)
	// DownloadWorker fetch raw script content for your worker returns []byte containing worker code js
	//
	// API reference: https://api.cloudflare.com/#worker-script-download-worker
	DownloadWorker(requestParams *WorkerRequestParams) (WorkerScriptResponse, error)
	// ListWorkerBindings returns all the bindings for a particular worker
	ListWorkerBindings(requestParams *WorkerRequestParams) (WorkerBindingListResponse, error)
	// ListWorkerScripts returns list of worker scripts for given account.
	//
	// API reference: https://developers.cloudflare.com/workers/tooling/api/scripts/
	ListWorkerScripts() (WorkerListResponse, error)
	// UploadWorker push raw script content for your worker.
	//
	// API reference: https://api.cloudflare.com/#worker-script-upload-worker
	UploadWorker(requestParams *WorkerRequestParams, data string) (WorkerScriptResponse, error)
	// UploadWorkerWithBindings push raw script content and bindings for your worker
	//
	// API reference: https://api.cloudflare.com/#worker-script-upload-worker
	UploadWorkerWithBindings(requestParams *WorkerRequestParams, data *WorkerScriptParams) (WorkerScriptResponse, error)
	// CreateWorkerRoute creates worker route for a zone
	//
	// API reference: https://api.cloudflare.com/#worker-filters-create-filter, https://api.cloudflare.com/#worker-routes-create-route
	CreateWorkerRoute(zoneID string, route WorkerRoute) (WorkerRouteResponse, error)
	// DeleteWorkerRoute deletes worker route for a zone
	//
	// API reference: https://api.cloudflare.com/#worker-routes-delete-route
	DeleteWorkerRoute(zoneID string, routeID string) (WorkerRouteResponse, error)
	// ListWorkerRoutes returns list of worker routes
	//
	// API reference: https://api.cloudflare.com/#worker-filters-list-filters, https://api.cloudflare.com/#worker-routes-list-routes
	ListWorkerRoutes(zoneID string) (WorkerRoutesResponse, error)
	// UpdateWorkerRoute updates worker route for a zone.
	//
	// API reference: https://api.cloudflare.com/#worker-filters-update-filter, https://api.cloudflare.com/#worker-routes-update-route
	UpdateWorkerRoute(zoneID string, routeID string, route WorkerRoute) (WorkerRouteResponse, error)
	// CreateWorkersKVNamespace creates a namespace under the given title.
	// A 400 is returned if the account already owns a namespace with this title.
	// A namespace must be explicitly deleted to be replaced.
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-create-a-namespace
	CreateWorkersKVNamespace(ctx context.Context, req *WorkersKVNamespaceRequest) (WorkersKVNamespaceResponse, error)
	// ListWorkersKVNamespaces lists storage namespaces
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-list-namespaces
	ListWorkersKVNamespaces(ctx context.Context) ([]WorkersKVNamespace, error)
	// DeleteWorkersKVNamespace deletes the namespace corresponding to the given ID
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-remove-a-namespace
	DeleteWorkersKVNamespace(ctx context.Context, namespaceID string) (Response, error)
	// UpdateWorkersKVNamespace modifies a namespace's title
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-rename-a-namespace
	UpdateWorkersKVNamespace(ctx context.Context, namespaceID string, req *WorkersKVNamespaceRequest) (Response, error)
	// WriteWorkersKV writes a value identified by a key.
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-write-key-value-pair
	WriteWorkersKV(ctx context.Context, namespaceID, key string, value []byte) (Response, error)
	// WriteWorkersKVBulk writes multiple KVs at once.
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-write-multiple-key-value-pairs
	WriteWorkersKVBulk(ctx context.Context, namespaceID string, kvs WorkersKVBulkWriteRequest) (Response, error)
	// ReadWorkersKV returns the value associated with the given key in the given namespace
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-read-key-value-pair
	ReadWorkersKV(ctx context.Context, namespaceID, key string) ([]byte, error)
	// DeleteWorkersKV deletes a key and value for a provided storage namespace
	//
	// API reference: https://api.cloudflare.com/#workers-kv-namespace-delete-key-value-pair
	DeleteWorkersKV(ctx context.Context, namespaceID, key string) (Response, error)
	// ListWorkersKVs lists a namespace's keys
	//
	// API Reference: https://api.cloudflare.com/#workers-kv-namespace-list-a-namespace-s-keys
	ListWorkersKVs(ctx context.Context, namespaceID string) (ListStorageKeysResponse, error)
	// CreateZone creates a zone on an account.
	//
	// Setting jumpstart to true will attempt to automatically scan for existing
	// DNS records. Setting this to false will create the zone with no DNS records.
	//
	// If account is non-empty, it must have at least the ID field populated.
	// This will add the new zone to the specified multi-user account.
	//
	// API reference: https://api.cloudflare.com/#zone-create-a-zone
	CreateZone(name string, jumpstart bool, account Account, zoneType string) (Zone, error)
	// ZoneActivationCheck initiates another zone activation check for newly-created zones.
	//
	// API reference: https://api.cloudflare.com/#zone-initiate-another-zone-activation-check
	ZoneActivationCheck(zoneID string) (Response, error)
	// ListZones lists zones on an account. Optionally takes a list of zone names
	// to filter against.
	//
	// API reference: https://api.cloudflare.com/#zone-list-zones
	ListZones(z ...string) ([]Zone, error)
	// ListZonesContext lists zones on an account. Optionally takes a list of ReqOptions.
	ListZonesContext(ctx context.Context, opts ...ReqOption) (r ZonesResponse, err error)
	// ZoneDetails fetches information about a zone.
	//
	// API reference: https://api.cloudflare.com/#zone-zone-details
	ZoneDetails(zoneID string) (Zone, error)
	// ZoneSetPaused pauses Cloudflare service for the entire zone, sending all
	// traffic direct to the origin.
	ZoneSetPaused(zoneID string, paused bool) (Zone, error)
	// ZoneSetVanityNS sets custom nameservers for the zone.
	// These names must be within the same zone.
	ZoneSetVanityNS(zoneID string, ns []string) (Zone, error)
	// ZoneSetPlan sets the rate plan of an existing zone.
	//
	// Valid values for `planType` are "CF_FREE", "CF_PRO", "CF_BIZ" and
	// "CF_ENT".
	//
	// API reference: https://api.cloudflare.com/#zone-subscription-create-zone-subscription
	ZoneSetPlan(zoneID string, planType string) error
	// ZoneUpdatePlan updates the rate plan of an existing zone.
	//
	// Valid values for `planType` are "CF_FREE", "CF_PRO", "CF_BIZ" and
	// "CF_ENT".
	//
	// API reference: https://api.cloudflare.com/#zone-subscription-update-zone-subscription
	ZoneUpdatePlan(zoneID string, planType string) error
	// EditZone edits the given zone.
	//
	// This is usually called by ZoneSetPaused or ZoneSetVanityNS.
	//
	// API reference: https://api.cloudflare.com/#zone-edit-zone-properties
	EditZone(zoneID string, zoneOpts ZoneOptions) (Zone, error)
	// PurgeEverything purges the cache for the given zone.
	//
	// Note: this will substantially increase load on the origin server for that
	// zone if there is a high cached vs. uncached request ratio.
	//
	// API reference: https://api.cloudflare.com/#zone-purge-all-files
	PurgeEverything(zoneID string) (PurgeCacheResponse, error)
	// PurgeCache purges the cache using the given PurgeCacheRequest (zone/url/tag).
	//
	// API reference: https://api.cloudflare.com/#zone-purge-individual-files-by-url-and-cache-tags
	PurgeCache(zoneID string, pcr PurgeCacheRequest) (PurgeCacheResponse, error)
	// DeleteZone deletes the given zone.
	//
	// API reference: https://api.cloudflare.com/#zone-delete-a-zone
	DeleteZone(zoneID string) (ZoneID, error)
	// AvailableZoneRatePlans returns information about all plans available to the specified zone.
	//
	// API reference: https://api.cloudflare.com/#zone-plan-available-plans
	AvailableZoneRatePlans(zoneID string) ([]ZoneRatePlan, error)
	// AvailableZonePlans returns information about all plans available to the specified zone.
	//
	// API reference: https://api.cloudflare.com/#zone-rate-plan-list-available-plans
	AvailableZonePlans(zoneID string) ([]ZonePlan, error)
	// ZoneAnalyticsDashboard returns zone analytics information.
	//
	// API reference: https://api.cloudflare.com/#zone-analytics-dashboard
	ZoneAnalyticsDashboard(zoneID string, options ZoneAnalyticsOptions) (ZoneAnalyticsData, error)
	// ZoneAnalyticsByColocation returns zone analytics information by datacenter.
	//
	// API reference: https://api.cloudflare.com/#zone-analytics-analytics-by-co-locations
	ZoneAnalyticsByColocation(zoneID string, options ZoneAnalyticsOptions) ([]ZoneAnalyticsColocation, error)
	// ZoneSettings returns all of the settings for a given zone.
	//
	// API reference: https://api.cloudflare.com/#zone-settings-get-all-zone-settings
	ZoneSettings(zoneID string) (*ZoneSettingResponse, error)
	// UpdateZoneSettings updates the settings for a given zone.
	//
	// API reference: https://api.cloudflare.com/#zone-settings-edit-zone-settings-info
	UpdateZoneSettings(zoneID string, settings []ZoneSetting) (*ZoneSettingResponse, error)
	// ZoneSSLSettings returns information about SSL setting to the specified zone.
	//
	// API reference: https://api.cloudflare.com/#zone-settings-get-ssl-setting
	ZoneSSLSettings(zoneID string) (ZoneSSLSetting, error)
	// FallbackOrigin returns information about the fallback origin for the specified zone.
	//
	// API reference: https://developers.cloudflare.com/ssl/ssl-for-saas/api-calls/#fallback-origin-configuration
	FallbackOrigin(zoneID string) (FallbackOrigin, error)
	// UpdateFallbackOrigin updates the fallback origin for a given zone.
	//
	// API reference: https://developers.cloudflare.com/ssl/ssl-for-saas/api-calls/#4-example-patch-to-change-fallback-origin
	UpdateFallbackOrigin(zoneID string, fbo FallbackOrigin) (*FallbackOriginResponse, error)
	// ZoneSingleSetting returns information about specified setting to the specified zone.
	//
	// API reference: https://api.cloudflare.com/#zone-settings-get-all-zone-settings
	ZoneSingleSetting(zoneID, settingName string) (ZoneSetting, error)
	// UpdateZoneSingleSetting updates the specified setting for a given zone.
	//
	// API reference: https://api.cloudflare.com/#zone-settings-edit-zone-settings-info
	UpdateZoneSingleSetting(zoneID, settingName string, setting ZoneSetting) (*ZoneSettingSingleResponse, error)
	// ZoneExport returns the text BIND config for the given zone
	//
	// API reference: https://api.cloudflare.com/#dns-records-for-a-zone-export-dns-records
	ZoneExport(zoneID string) (string, error)
}
