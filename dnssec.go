// File generated from our OpenAPI spec by Stainless.

package cloudflare

import (
	"context"
	"fmt"
	"net/http"
	"reflect"
	"time"

	"github.com/cloudflare/cloudflare-go/internal/apijson"
	"github.com/cloudflare/cloudflare-go/internal/param"
	"github.com/cloudflare/cloudflare-go/internal/requestconfig"
	"github.com/cloudflare/cloudflare-go/internal/shared"
	"github.com/cloudflare/cloudflare-go/option"
	"github.com/tidwall/gjson"
)

// DNSSECService contains methods and other services that help with interacting
// with the cloudflare API. Note, unlike clients, this service does not read
// variables from the environment automatically. You should not instantiate this
// service directly, and instead use the [NewDNSSECService] method instead.
type DNSSECService struct {
	Options []option.RequestOption
}

// NewDNSSECService generates a new service that applies the given options to each
// request. These options are applied after the parent client's options (if there
// is one), and before any request-specific options.
func NewDNSSECService(opts ...option.RequestOption) (r *DNSSECService) {
	r = &DNSSECService{}
	r.Options = opts
	return
}

// Delete DNSSEC.
func (r *DNSSECService) Delete(ctx context.Context, body DNSSECDeleteParams, opts ...option.RequestOption) (res *DNSSECDeleteResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env DNSSECDeleteResponseEnvelope
	path := fmt.Sprintf("zones/%s/dnssec", body.ZoneID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodDelete, path, body, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Enable or disable DNSSEC.
func (r *DNSSECService) Edit(ctx context.Context, params DNSSECEditParams, opts ...option.RequestOption) (res *DNSSECEditResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env DNSSECEditResponseEnvelope
	path := fmt.Sprintf("zones/%s/dnssec", params.ZoneID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPatch, path, params, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Details about DNSSEC status and configuration.
func (r *DNSSECService) Get(ctx context.Context, query DNSSECGetParams, opts ...option.RequestOption) (res *DNSSECGetResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env DNSSECGetResponseEnvelope
	path := fmt.Sprintf("zones/%s/dnssec", query.ZoneID)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Union satisfied by [DNSSECDeleteResponseUnknown] or [shared.UnionString].
type DNSSECDeleteResponse interface {
	ImplementsDNSSECDeleteResponse()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*DNSSECDeleteResponse)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.String,
			Type:       reflect.TypeOf(shared.UnionString("")),
		},
	)
}

type DNSSECEditResponse struct {
	// Algorithm key code.
	Algorithm string `json:"algorithm,nullable"`
	// Digest hash.
	Digest string `json:"digest,nullable"`
	// Type of digest algorithm.
	DigestAlgorithm string `json:"digest_algorithm,nullable"`
	// Coded type for digest algorithm.
	DigestType string `json:"digest_type,nullable"`
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
	// to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
	// records (except those automatically generated by Cloudflare) to be added to the
	// zone.
	//
	// See
	// [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
	// for details.
	DNSSECMultiSigner bool `json:"dnssec_multi_signer"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
	// signatures from an external provider, without requiring Cloudflare to sign any
	// records on the fly.
	//
	// Note that this feature has some limitations. See
	// [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
	// for details.
	DNSSECPresigned bool `json:"dnssec_presigned"`
	// Full DS record.
	DS string `json:"ds,nullable"`
	// Flag for DNSSEC record.
	Flags float64 `json:"flags,nullable"`
	// Code for key tag.
	KeyTag float64 `json:"key_tag,nullable"`
	// Algorithm key type.
	KeyType string `json:"key_type,nullable"`
	// When DNSSEC was last modified.
	ModifiedOn time.Time `json:"modified_on,nullable" format:"date-time"`
	// Public key for DS record.
	PublicKey string `json:"public_key,nullable"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	Status DNSSECEditResponseStatus `json:"status"`
	JSON   dnssecEditResponseJSON   `json:"-"`
}

// dnssecEditResponseJSON contains the JSON metadata for the struct
// [DNSSECEditResponse]
type dnssecEditResponseJSON struct {
	Algorithm         apijson.Field
	Digest            apijson.Field
	DigestAlgorithm   apijson.Field
	DigestType        apijson.Field
	DNSSECMultiSigner apijson.Field
	DNSSECPresigned   apijson.Field
	DS                apijson.Field
	Flags             apijson.Field
	KeyTag            apijson.Field
	KeyType           apijson.Field
	ModifiedOn        apijson.Field
	PublicKey         apijson.Field
	Status            apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *DNSSECEditResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecEditResponseJSON) RawJSON() string {
	return r.raw
}

// Status of DNSSEC, based on user-desired state and presence of necessary records.
type DNSSECEditResponseStatus string

const (
	DNSSECEditResponseStatusActive          DNSSECEditResponseStatus = "active"
	DNSSECEditResponseStatusPending         DNSSECEditResponseStatus = "pending"
	DNSSECEditResponseStatusDisabled        DNSSECEditResponseStatus = "disabled"
	DNSSECEditResponseStatusPendingDisabled DNSSECEditResponseStatus = "pending-disabled"
	DNSSECEditResponseStatusError           DNSSECEditResponseStatus = "error"
)

type DNSSECGetResponse struct {
	// Algorithm key code.
	Algorithm string `json:"algorithm,nullable"`
	// Digest hash.
	Digest string `json:"digest,nullable"`
	// Type of digest algorithm.
	DigestAlgorithm string `json:"digest_algorithm,nullable"`
	// Coded type for digest algorithm.
	DigestType string `json:"digest_type,nullable"`
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
	// to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
	// records (except those automatically generated by Cloudflare) to be added to the
	// zone.
	//
	// See
	// [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
	// for details.
	DNSSECMultiSigner bool `json:"dnssec_multi_signer"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
	// signatures from an external provider, without requiring Cloudflare to sign any
	// records on the fly.
	//
	// Note that this feature has some limitations. See
	// [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
	// for details.
	DNSSECPresigned bool `json:"dnssec_presigned"`
	// Full DS record.
	DS string `json:"ds,nullable"`
	// Flag for DNSSEC record.
	Flags float64 `json:"flags,nullable"`
	// Code for key tag.
	KeyTag float64 `json:"key_tag,nullable"`
	// Algorithm key type.
	KeyType string `json:"key_type,nullable"`
	// When DNSSEC was last modified.
	ModifiedOn time.Time `json:"modified_on,nullable" format:"date-time"`
	// Public key for DS record.
	PublicKey string `json:"public_key,nullable"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	Status DNSSECGetResponseStatus `json:"status"`
	JSON   dnssecGetResponseJSON   `json:"-"`
}

// dnssecGetResponseJSON contains the JSON metadata for the struct
// [DNSSECGetResponse]
type dnssecGetResponseJSON struct {
	Algorithm         apijson.Field
	Digest            apijson.Field
	DigestAlgorithm   apijson.Field
	DigestType        apijson.Field
	DNSSECMultiSigner apijson.Field
	DNSSECPresigned   apijson.Field
	DS                apijson.Field
	Flags             apijson.Field
	KeyTag            apijson.Field
	KeyType           apijson.Field
	ModifiedOn        apijson.Field
	PublicKey         apijson.Field
	Status            apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *DNSSECGetResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecGetResponseJSON) RawJSON() string {
	return r.raw
}

// Status of DNSSEC, based on user-desired state and presence of necessary records.
type DNSSECGetResponseStatus string

const (
	DNSSECGetResponseStatusActive          DNSSECGetResponseStatus = "active"
	DNSSECGetResponseStatusPending         DNSSECGetResponseStatus = "pending"
	DNSSECGetResponseStatusDisabled        DNSSECGetResponseStatus = "disabled"
	DNSSECGetResponseStatusPendingDisabled DNSSECGetResponseStatus = "pending-disabled"
	DNSSECGetResponseStatusError           DNSSECGetResponseStatus = "error"
)

type DNSSECDeleteParams struct {
	// Identifier
	ZoneID param.Field[string] `path:"zone_id,required"`
}

type DNSSECDeleteResponseEnvelope struct {
	Errors   []DNSSECDeleteResponseEnvelopeErrors   `json:"errors,required"`
	Messages []DNSSECDeleteResponseEnvelopeMessages `json:"messages,required"`
	Result   DNSSECDeleteResponse                   `json:"result,required"`
	// Whether the API call was successful
	Success DNSSECDeleteResponseEnvelopeSuccess `json:"success,required"`
	JSON    dnssecDeleteResponseEnvelopeJSON    `json:"-"`
}

// dnssecDeleteResponseEnvelopeJSON contains the JSON metadata for the struct
// [DNSSECDeleteResponseEnvelope]
type dnssecDeleteResponseEnvelopeJSON struct {
	Errors      apijson.Field
	Messages    apijson.Field
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECDeleteResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecDeleteResponseEnvelopeJSON) RawJSON() string {
	return r.raw
}

type DNSSECDeleteResponseEnvelopeErrors struct {
	Code    int64                                  `json:"code,required"`
	Message string                                 `json:"message,required"`
	JSON    dnssecDeleteResponseEnvelopeErrorsJSON `json:"-"`
}

// dnssecDeleteResponseEnvelopeErrorsJSON contains the JSON metadata for the struct
// [DNSSECDeleteResponseEnvelopeErrors]
type dnssecDeleteResponseEnvelopeErrorsJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECDeleteResponseEnvelopeErrors) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecDeleteResponseEnvelopeErrorsJSON) RawJSON() string {
	return r.raw
}

type DNSSECDeleteResponseEnvelopeMessages struct {
	Code    int64                                    `json:"code,required"`
	Message string                                   `json:"message,required"`
	JSON    dnssecDeleteResponseEnvelopeMessagesJSON `json:"-"`
}

// dnssecDeleteResponseEnvelopeMessagesJSON contains the JSON metadata for the
// struct [DNSSECDeleteResponseEnvelopeMessages]
type dnssecDeleteResponseEnvelopeMessagesJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECDeleteResponseEnvelopeMessages) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecDeleteResponseEnvelopeMessagesJSON) RawJSON() string {
	return r.raw
}

// Whether the API call was successful
type DNSSECDeleteResponseEnvelopeSuccess bool

const (
	DNSSECDeleteResponseEnvelopeSuccessTrue DNSSECDeleteResponseEnvelopeSuccess = true
)

type DNSSECEditParams struct {
	// Identifier
	ZoneID param.Field[string] `path:"zone_id,required"`
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple providers
	// to serve a DNSSEC-signed zone at the same time. This is required for DNSKEY
	// records (except those automatically generated by Cloudflare) to be added to the
	// zone.
	//
	// See
	// [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/)
	// for details.
	DNSSECMultiSigner param.Field[bool] `json:"dnssec_multi_signer"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including
	// signatures from an external provider, without requiring Cloudflare to sign any
	// records on the fly.
	//
	// Note that this feature has some limitations. See
	// [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec)
	// for details.
	DNSSECPresigned param.Field[bool] `json:"dnssec_presigned"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	Status param.Field[DNSSECEditParamsStatus] `json:"status"`
}

func (r DNSSECEditParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Status of DNSSEC, based on user-desired state and presence of necessary records.
type DNSSECEditParamsStatus string

const (
	DNSSECEditParamsStatusActive   DNSSECEditParamsStatus = "active"
	DNSSECEditParamsStatusDisabled DNSSECEditParamsStatus = "disabled"
)

type DNSSECEditResponseEnvelope struct {
	Errors   []DNSSECEditResponseEnvelopeErrors   `json:"errors,required"`
	Messages []DNSSECEditResponseEnvelopeMessages `json:"messages,required"`
	Result   DNSSECEditResponse                   `json:"result,required"`
	// Whether the API call was successful
	Success DNSSECEditResponseEnvelopeSuccess `json:"success,required"`
	JSON    dnssecEditResponseEnvelopeJSON    `json:"-"`
}

// dnssecEditResponseEnvelopeJSON contains the JSON metadata for the struct
// [DNSSECEditResponseEnvelope]
type dnssecEditResponseEnvelopeJSON struct {
	Errors      apijson.Field
	Messages    apijson.Field
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECEditResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecEditResponseEnvelopeJSON) RawJSON() string {
	return r.raw
}

type DNSSECEditResponseEnvelopeErrors struct {
	Code    int64                                `json:"code,required"`
	Message string                               `json:"message,required"`
	JSON    dnssecEditResponseEnvelopeErrorsJSON `json:"-"`
}

// dnssecEditResponseEnvelopeErrorsJSON contains the JSON metadata for the struct
// [DNSSECEditResponseEnvelopeErrors]
type dnssecEditResponseEnvelopeErrorsJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECEditResponseEnvelopeErrors) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecEditResponseEnvelopeErrorsJSON) RawJSON() string {
	return r.raw
}

type DNSSECEditResponseEnvelopeMessages struct {
	Code    int64                                  `json:"code,required"`
	Message string                                 `json:"message,required"`
	JSON    dnssecEditResponseEnvelopeMessagesJSON `json:"-"`
}

// dnssecEditResponseEnvelopeMessagesJSON contains the JSON metadata for the struct
// [DNSSECEditResponseEnvelopeMessages]
type dnssecEditResponseEnvelopeMessagesJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECEditResponseEnvelopeMessages) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecEditResponseEnvelopeMessagesJSON) RawJSON() string {
	return r.raw
}

// Whether the API call was successful
type DNSSECEditResponseEnvelopeSuccess bool

const (
	DNSSECEditResponseEnvelopeSuccessTrue DNSSECEditResponseEnvelopeSuccess = true
)

type DNSSECGetParams struct {
	// Identifier
	ZoneID param.Field[string] `path:"zone_id,required"`
}

type DNSSECGetResponseEnvelope struct {
	Errors   []DNSSECGetResponseEnvelopeErrors   `json:"errors,required"`
	Messages []DNSSECGetResponseEnvelopeMessages `json:"messages,required"`
	Result   DNSSECGetResponse                   `json:"result,required"`
	// Whether the API call was successful
	Success DNSSECGetResponseEnvelopeSuccess `json:"success,required"`
	JSON    dnssecGetResponseEnvelopeJSON    `json:"-"`
}

// dnssecGetResponseEnvelopeJSON contains the JSON metadata for the struct
// [DNSSECGetResponseEnvelope]
type dnssecGetResponseEnvelopeJSON struct {
	Errors      apijson.Field
	Messages    apijson.Field
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECGetResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecGetResponseEnvelopeJSON) RawJSON() string {
	return r.raw
}

type DNSSECGetResponseEnvelopeErrors struct {
	Code    int64                               `json:"code,required"`
	Message string                              `json:"message,required"`
	JSON    dnssecGetResponseEnvelopeErrorsJSON `json:"-"`
}

// dnssecGetResponseEnvelopeErrorsJSON contains the JSON metadata for the struct
// [DNSSECGetResponseEnvelopeErrors]
type dnssecGetResponseEnvelopeErrorsJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECGetResponseEnvelopeErrors) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecGetResponseEnvelopeErrorsJSON) RawJSON() string {
	return r.raw
}

type DNSSECGetResponseEnvelopeMessages struct {
	Code    int64                                 `json:"code,required"`
	Message string                                `json:"message,required"`
	JSON    dnssecGetResponseEnvelopeMessagesJSON `json:"-"`
}

// dnssecGetResponseEnvelopeMessagesJSON contains the JSON metadata for the struct
// [DNSSECGetResponseEnvelopeMessages]
type dnssecGetResponseEnvelopeMessagesJSON struct {
	Code        apijson.Field
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *DNSSECGetResponseEnvelopeMessages) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r dnssecGetResponseEnvelopeMessagesJSON) RawJSON() string {
	return r.raw
}

// Whether the API call was successful
type DNSSECGetResponseEnvelopeSuccess bool

const (
	DNSSECGetResponseEnvelopeSuccessTrue DNSSECGetResponseEnvelopeSuccess = true
)
